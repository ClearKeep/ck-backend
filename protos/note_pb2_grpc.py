# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos import note_pb2 as protos_dot_note__pb2


class NoteStub(object):
    """gRPC methods
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_note = channel.unary_unary(
                '/note.Note/create_note',
                request_serializer=protos_dot_note__pb2.CreateNoteRequest.SerializeToString,
                response_deserializer=protos_dot_note__pb2.UserNoteResponse.FromString,
                )
        self.edit_note = channel.unary_unary(
                '/note.Note/edit_note',
                request_serializer=protos_dot_note__pb2.EditNoteRequest.SerializeToString,
                response_deserializer=protos_dot_note__pb2.BaseResponse.FromString,
                )
        self.delete_note = channel.unary_unary(
                '/note.Note/delete_note',
                request_serializer=protos_dot_note__pb2.DeleteNoteRequest.SerializeToString,
                response_deserializer=protos_dot_note__pb2.BaseResponse.FromString,
                )
        self.get_user_notes = channel.unary_unary(
                '/note.Note/get_user_notes',
                request_serializer=protos_dot_note__pb2.GetUserNotesRequest.SerializeToString,
                response_deserializer=protos_dot_note__pb2.GetUserNotesResponse.FromString,
                )


class NoteServicer(object):
    """gRPC methods
    """

    def create_note(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def edit_note(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_note(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_user_notes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NoteServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_note': grpc.unary_unary_rpc_method_handler(
                    servicer.create_note,
                    request_deserializer=protos_dot_note__pb2.CreateNoteRequest.FromString,
                    response_serializer=protos_dot_note__pb2.UserNoteResponse.SerializeToString,
            ),
            'edit_note': grpc.unary_unary_rpc_method_handler(
                    servicer.edit_note,
                    request_deserializer=protos_dot_note__pb2.EditNoteRequest.FromString,
                    response_serializer=protos_dot_note__pb2.BaseResponse.SerializeToString,
            ),
            'delete_note': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_note,
                    request_deserializer=protos_dot_note__pb2.DeleteNoteRequest.FromString,
                    response_serializer=protos_dot_note__pb2.BaseResponse.SerializeToString,
            ),
            'get_user_notes': grpc.unary_unary_rpc_method_handler(
                    servicer.get_user_notes,
                    request_deserializer=protos_dot_note__pb2.GetUserNotesRequest.FromString,
                    response_serializer=protos_dot_note__pb2.GetUserNotesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'note.Note', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Note(object):
    """gRPC methods
    """

    @staticmethod
    def create_note(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/note.Note/create_note',
            protos_dot_note__pb2.CreateNoteRequest.SerializeToString,
            protos_dot_note__pb2.UserNoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def edit_note(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/note.Note/edit_note',
            protos_dot_note__pb2.EditNoteRequest.SerializeToString,
            protos_dot_note__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_note(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/note.Note/delete_note',
            protos_dot_note__pb2.DeleteNoteRequest.SerializeToString,
            protos_dot_note__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_user_notes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/note.Note/get_user_notes',
            protos_dot_note__pb2.GetUserNotesRequest.SerializeToString,
            protos_dot_note__pb2.GetUserNotesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
