syntax = "proto3";
package auth;


message BaseResponse {
    string error = 1;
}

message PeerRegisterClientKeyRequest {
    int32 registrationId = 1;
    int32 deviceId = 2;

    bytes identityKeyPublic = 3;

    int32 preKeyId = 4;
    bytes preKey = 5;

    int32 signedPreKeyId = 6;
    bytes signedPreKey = 7;

    bytes signedPreKeySignature = 8;

    bytes identityKeyEncrypted = 9;
}


// Response
message PeerGetClientKeyResponse {
    string clientId = 1;
    string workspace_domain = 2;
    int32 registrationId = 3;
    int32 deviceId = 4;

    bytes identityKeyPublic = 5;

    int32 preKeyId = 6;
    bytes preKey = 7;

    int32 signedPreKeyId = 8;
    bytes signedPreKey = 9;

    bytes signedPreKeySignature = 10;

    bytes identityKeyEncrypted = 11;
}

//Login message struct
message AuthReq {
    string workspace_domain = 1;
    string email = 2;
    string hash_password = 3;
    int64 auth_type = 4;
}

message LogoutReq {
    string device_id = 1;
    string refresh_token = 2;
}

// fogot password
message FogotPassWord {
    string email = 1;
}

message AuthRes {
    string workspace_domain = 1;
    string workspace_name = 2;
    string access_token = 3;
    int64 expires_in = 4;
    int64 refresh_expires_in = 5;
    string refresh_token = 6;
    string token_type = 7;
    string session_state = 8;
    string scope = 9;
    string hash_key = 10;
    string sub = 11;
    string pre_access_token = 12;
    string require_action = 13;
    string salt = 14;
    PeerGetClientKeyResponse client_key_peer = 15;
    string IvParameterSpec = 16;
    string error = 17;
}

//Register message struct
message RegisterReq {
    string workspace_domain = 1;
    string email = 2;
    string display_name = 3;
    string hash_password = 4;
    int64 auth_type = 5;
    string first_name = 6;
    string last_name = 7;
    string salt = 8;
    PeerRegisterClientKeyRequest client_key_peer = 9;
    string IvParameterSpec = 10;
}

message RegisterRes {
    string error = 1;
}


//Login Google message struct
message GoogleLoginReq {
    string workspace_domain = 1;
    string id_token = 2;
}

//Login Office365 message struct
message OfficeLoginReq {
    string workspace_domain = 1;
    string access_token = 2;
}

//Login Facebook message struct
message FacebookLoginReq {
    string workspace_domain = 1;
    string access_token = 2;
}

// Register a Pincode struct
message RegisterPinCodeReq {
    string pre_access_token = 1;
    string user_id = 2;
    string hash_pincode = 3;
    string salt = 4;
    PeerRegisterClientKeyRequest client_key_peer = 5;
    string IvParameterSpec = 6;
}
// return AuthRes


// VerifyPinCodeReq
message VerifyPinCodeReq {
    string pre_access_token = 1;
    string user_id = 2;
    string hash_pincode = 3;
}
// return AuthRes

message MfaValidateOtpRequest {
    string otp_code = 1;
    string user_id = 2;
    string otp_hash = 3;
}

// we still need user_id and otp_hash for author and authen user
message MfaResendOtpReq {
    string user_id = 1;
    string otp_hash = 2;
}

message MfaResendOtpRes{
    string otp_hash = 1;
    bool success = 2;
    string error = 3;
}

service Auth {
    rpc login(AuthReq) returns (AuthRes) {};
    rpc login_google(GoogleLoginReq) returns (AuthRes) {};
    rpc login_office(OfficeLoginReq) returns (AuthRes) {};
    rpc login_facebook(FacebookLoginReq) returns (AuthRes) {};
    rpc validate_otp(MfaValidateOtpRequest) returns (AuthRes) {};
    rpc resend_otp(MfaResendOtpReq) returns (MfaResendOtpRes) {};
    rpc register(RegisterReq) returns (RegisterRes) {};
    rpc fogot_password(FogotPassWord) returns (BaseResponse) {};
    rpc logout(LogoutReq) returns (BaseResponse) {};
    rpc register_pincode(RegisterPinCodeReq) returns (AuthRes) {};
    rpc verify_pincode(VerifyPinCodeReq) returns (AuthRes) {};
}
