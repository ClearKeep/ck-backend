syntax = "proto3";
package auth;


message BaseResponse {
    string error = 1;
}

message PeerRegisterClientKeyRequest {
    int32 registrationId = 1;
    int32 deviceId = 2;
    bytes identityKeyPublic = 3;
    int32 preKeyId = 4;
    bytes preKey = 5;
    int32 signedPreKeyId = 6;
    bytes signedPreKey = 7;
    bytes signedPreKeySignature = 8;
    string identityKeyEncrypted = 9;
}


// Response
message PeerGetClientKeyResponse {
    string clientId = 1;
    string workspace_domain = 2;
    int32 registrationId = 3;
    int32 deviceId = 4;
    bytes identityKeyPublic = 5;
    int32 preKeyId = 6;
    bytes preKey = 7;
    int32 signedPreKeyId = 8;
    bytes signedPreKey = 9;
    bytes signedPreKeySignature = 10;
    string identityKeyEncrypted = 11;
}

//Login message struct
message AuthReq {
    string workspace_domain = 1;
    string email = 2;
    string hash_password = 3;
    int64 auth_type = 4;
}

message LogoutReq {
    string device_id = 1;
    string refresh_token = 2;
}

// fogot password
message ForgotPasswordReq {
    string email = 1;
}

message ForgotPasswordUpdateReq{
    string pre_access_token = 1;
    string email = 2;
    string hash_password = 3;
    string salt = 4;
    string iv_parameter = 5;
    PeerRegisterClientKeyRequest client_key_peer = 6;
}

message AuthRes {
    string workspace_domain = 1;
    string workspace_name = 2;
    string access_token = 3;
    int64 expires_in = 4;
    int64 refresh_expires_in = 5;
    string refresh_token = 6;
    string token_type = 7;
    string session_state = 8;
    string scope = 9;
    string hash_key = 10;
    string sub = 11;
    string pre_access_token = 12;
    string require_action = 13;
    string salt = 14;
    PeerGetClientKeyResponse client_key_peer = 15;
    string iv_parameter = 16;
    string error = 17;
}

//Register message struct
message RegisterReq {
    string workspace_domain = 1;
    string email = 2;
    string display_name = 3;
    string hash_password = 4;
    int64 auth_type = 5;
    string first_name = 6;
    string last_name = 7;
    string salt = 8;
    PeerRegisterClientKeyRequest client_key_peer = 9;
    string iv_parameter = 10;
}

message RegisterRes {
    string error = 1;
}


//Login Google message struct
message GoogleLoginReq {
    string workspace_domain = 1;
    string id_token = 2;
}


//Login Office365 message struct
message OfficeLoginReq {
    string workspace_domain = 1;
    string access_token = 2;
}

//Login Facebook message struct
message FacebookLoginReq {
    string workspace_domain = 1;
    string access_token = 2;
}

message SocialLoginRes {
    string user_name = 1;
    string require_action = 2;
    string reset_pincode_token = 3;
}

// Register a Pincode struct
message RegisterPinCodeReq {
    string user_name = 1;
    string hash_pincode = 2;
    string salt = 3;
    PeerRegisterClientKeyRequest client_key_peer = 4;
    string iv_parameter = 5;
}
// return AuthRes


// Verify Pincode struct
message VerifyPinCodeReq {
    string user_name = 1;
    string client_public = 2;
    string client_session_key_proof = 3;
}
// return AuthRes

// Reset Pincode, in case forgotten pincode
// Note that reset pincode will also cause old message cannot be read
// empty string indicate this field will be unchanging after update
message ResetPinCodeReq{
    string reset_pincode_token = 1;
    string user_name = 2;
    string hash_pincode = 3;
    string salt = 4;
    string iv_parameter = 5;
    PeerRegisterClientKeyRequest client_key_peer = 6;
}

message MfaValidateOtpRequest {
    string otp_code = 1;
    string user_id = 2;
    string otp_hash = 3;
}

// we still need user_id and otp_hash for author and authen user
message MfaResendOtpReq {
    string user_id = 1;
    string otp_hash = 2;
}

message MfaResendOtpRes{
    string otp_hash = 1;
    bool success = 2;
    string error = 3;
}

//new flow login with srp
//Login message struct
message AuthChallengeReq {
    string email = 1;
    string client_public = 2;
}

message AuthSocialChallengeReq {
    string user_name = 1;
    string client_public = 2;
}

message AuthChallengeRes {
    string salt = 1;
    string public_challenge_b = 2;
}

message AuthenticateReq {
    string user_name = 1;
    string client_public = 2;
    string client_session_key_proof = 3;
}


message RegisterSRPReq {
    string workspace_domain = 1;
    string email = 2;
    string password_verifier = 3;
    string salt = 4;
    PeerRegisterClientKeyRequest client_key_peer = 5;
    string iv_parameter = 6;
    string display_name = 7;
    int64 auth_type = 8;
    string first_name = 9;
    string last_name = 10;
}

message RegisterSRPRes {
    string error = 1;
}

service Auth {

    // rpc register(RegisterReq) returns (RegisterRes) {};
    // rpc login(AuthReq) returns (AuthRes) {};
    rpc register_srp(RegisterSRPReq) returns (RegisterSRPRes) {};
    rpc forgot_password(ForgotPasswordReq) returns (BaseResponse) {};
    //new flow login with srp
    rpc login_challenge(AuthChallengeReq) returns (AuthChallengeRes) {};
    rpc forgot_password_update(ForgotPasswordUpdateReq) returns (AuthRes) {};
    //login with social
    rpc login_google(GoogleLoginReq) returns (SocialLoginRes) {};
    rpc login_office(OfficeLoginReq) returns (SocialLoginRes) {};
    rpc login_facebook(FacebookLoginReq) returns (SocialLoginRes) {};
    rpc login_social_challange(AuthSocialChallengeReq) returns (AuthChallengeRes) {};
    // authenticated challange
    rpc login_authenticate(AuthenticateReq) returns (AuthRes) {};
    //logout
    rpc logout(LogoutReq) returns (BaseResponse) {};
    //pincode flow
    rpc register_pincode(RegisterPinCodeReq) returns (AuthRes) {};
    rpc verify_pincode(VerifyPinCodeReq) returns (AuthRes) {};
    rpc reset_pincode(ResetPinCodeReq) returns (AuthRes) {};
    //end new flow login with srp
    //mfa flow
    rpc validate_otp(MfaValidateOtpRequest) returns (AuthRes) {};
    rpc resend_otp(MfaResendOtpReq) returns (MfaResendOtpRes) {};
}
