syntax = "proto3";

package user;

//errors response
message ErrorRes {
    int64 code = 1;
    string message = 2;
}

message BaseResponse {
    bool success = 1;
    ErrorRes errors = 2;
}

//----- FROM MY ACCOUNT -----
message UserProfileResponse {
    string id = 1;
    string display_name = 2;
    string email = 3;
    string first_name = 4;
    string last_name = 5;
}

// Request: get my info
message Empty {}
// Response: UserObjectResponse


// Request: update my info
message UpdateProfileRequest {
    string first_name = 1;
    string last_name = 2;
    string avatar = 3;
}
// Response: UserObjectResponse

// Request: change password
message ChangePasswordRequest {
    string old_password = 1;
    string new_password = 2;
}
// Response: BaseResponse


//----- FROM ANOTHER ACCOUNT -----
message UserInfoResponse {
    string id = 1;
    string display_name = 2;
    string workspace_domain = 3;
}

//Request: get other user info
message GetUserRequest {
    string client_id = 1;
    string workspace_domain = 2;
}
// Response: UserObjectResponse

// Request: Search User
message SearchUserRequest {
    string keyword = 1;
}
// Response
message SearchUserResponse {
    repeated UserInfoResponse lst_user = 1;
}

// Request: Get Users
// Response
message GetUsersResponse {
    repeated UserInfoResponse lst_user = 1;
}

// << Set user status >>
// request
message SetUserStatusRequest {
    string status = 1;
}

// << get user status >>
// Request: get my info
message PingRequest {}


message GetClientsStatusRequest {
    repeated MemberInfoRequest lst_client = 1;
 }

 message MemberInfoRequest {
   string client_id = 1;
   string workspace_domain = 2;
 }


 message GetClientsStatusResponse {
    repeated MemberInfoRes lst_client = 1;
 }

 message MemberInfoRes {
   string client_id = 1;
   string workspace_domain = 2;
   string status = 3;
 }

//----- MFA FLOW -----
 message MfaBaseResponse{
     bool success = 1;
     string next_step = 2;
     ErrorRes errors = 3;
 }

message MfaStateResponse{
    bool mfa_enable = 1;
}

message MfaChangingStateRequest {
}
// Response: MfaBaseResponse

message MfaValidatePasswordRequest {
     string password = 1;
}
// Response: MfaBaseResponse

message MfaValidateOtpRequest {
     string otp = 1;
}
// Response: MfaBaseResponse

service User {
    //----- FROM MY ACCOUNT -----
    rpc get_profile(Empty) returns (UserProfileResponse) {};
    rpc update_profile(UpdateProfileRequest) returns (BaseResponse) {};
    rpc change_password(ChangePasswordRequest) returns (BaseResponse) {};
    rpc update_status(SetUserStatusRequest) returns (BaseResponse) {};
    rpc ping_request(PingRequest) returns (BaseResponse) {};

    //----- MFA ENABLE FLOW -----
    rpc get_mfa_state(Empty) returns (MfaStateResponse) {};
    rpc enable_mfa(MfaChangingStateRequest) returns (MfaBaseResponse) {};
    rpc disable_mfa(MfaChangingStateRequest) returns (MfaBaseResponse) {};
    rpc mfa_validate_password(MfaValidatePasswordRequest) returns (MfaBaseResponse) {};
    rpc mfa_validate_otp(MfaValidateOtpRequest) returns (MfaBaseResponse) {};
    rpc mfa_resend_otp(Empty) returns (MfaBaseResponse) {};

    //----- FROM BOTH -----
    rpc get_clients_status(GetClientsStatusRequest) returns (GetClientsStatusResponse) {};

    //----- FROM OTHER ACCOUNT -----
    rpc get_user_info(GetUserRequest) returns (UserInfoResponse) {};
    rpc search_user(SearchUserRequest) returns (SearchUserResponse) {};
    rpc get_users(Empty) returns (GetUsersResponse) {};
}
