syntax = "proto3";

package signal;

//errors response
message ErrorRes {
    int64 code = 1;
    string message = 2;
}

message BaseResponse {
    bool success = 1;
    ErrorRes errors = 2;
}
// ----- SIGNAL PEER TO PEER KEY -----
// Request: register client key
message PeerRegisterClientKeyRequest {
    string clientId = 1;
    int32 registrationId = 2;
    int32 deviceId = 3;

    bytes identityKeyPublic = 4;

    int32 preKeyId = 5;
    bytes preKey = 6;

    int32 signedPreKeyId = 7;
    bytes signedPreKey = 8;

    bytes signedPreKeySignature = 9;
}
// Response: BaseResponse


// Request: Get client key via clientId
message PeerGetClientKeyRequest {
  string workspace_domain = 1;
  string clientId = 2;
}
// Response
message PeerGetClientKeyResponse {
    string clientId = 1;
    string workspace_domain = 2;
    int32 registrationId = 3;
    int32 deviceId = 4;

    bytes identityKeyPublic = 5;

    int32 preKeyId = 6;
    bytes preKey = 7;

    int32 signedPreKeyId = 8;
    bytes signedPreKey = 9;

    bytes signedPreKeySignature = 10;
}

// ----- SIGNAL GROUP KEY -----
// Request: register key of client when join to group
message GroupRegisterClientKeyRequest {
    int64 groupId = 1;
    string clientId = 2;
    int32 deviceId = 3;
    bytes clientKeyDistribution = 4;
}
//response: BaseResponse


//object
message GroupClientKeyObject {
    string  workspace_domain = 1;
    string clientId = 2;
    int32 deviceId = 3;
    bytes clientKeyDistribution = 4;
}


//Request: Get client key via clientId and groupId
message GroupGetClientKeyRequest {
  int64 groupId = 1;
  string clientId = 2;
}
//Response
message GroupGetClientKeyResponse {
  int64 groupId = 1;
  GroupClientKeyObject clientKey = 2;
}


// Request: Get all client key via groupId
message GroupGetAllClientKeyRequest {
  int64 groupId = 1;
}
// Response
message GroupGetAllClientKeyResponse {
    int64 groupId = 1;
    repeated GroupClientKeyObject lstClientKey = 2;
}

service SignalKeyDistribution {
      //peer
      rpc PeerRegisterClientKey (PeerRegisterClientKeyRequest) returns (BaseResponse);
      rpc PeerGetClientKey (PeerGetClientKeyRequest) returns (PeerGetClientKeyResponse);
      //group
      rpc GroupRegisterClientKey (GroupRegisterClientKeyRequest) returns (BaseResponse);
      rpc GroupGetClientKey (GroupGetClientKeyRequest) returns (GroupGetClientKeyResponse);
      rpc GroupGetAllClientKey (GroupGetAllClientKeyRequest) returns (GroupGetAllClientKeyResponse);
}