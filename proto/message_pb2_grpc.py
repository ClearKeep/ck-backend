# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import message_pb2 as proto_dot_message__pb2


class MessageStub(object):
    """message Publication {
    string fromClientId = 1;
    string groupId = 2;
    string groupType = 3;
    bytes message = 4;
    }

    Method
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_messages_in_group = channel.unary_unary(
                '/message.Message/get_messages_in_group',
                request_serializer=proto_dot_message__pb2.GetMessagesInGroupRequest.SerializeToString,
                response_deserializer=proto_dot_message__pb2.GetMessagesInGroupResponse.FromString,
                )
        self.Subscribe = channel.unary_unary(
                '/message.Message/Subscribe',
                request_serializer=proto_dot_message__pb2.SubscribeAndListenRequest.SerializeToString,
                response_deserializer=proto_dot_message__pb2.BaseResponse.FromString,
                )
        self.Listen = channel.unary_stream(
                '/message.Message/Listen',
                request_serializer=proto_dot_message__pb2.SubscribeAndListenRequest.SerializeToString,
                response_deserializer=proto_dot_message__pb2.MessageObjectResponse.FromString,
                )
        self.Publish = channel.unary_unary(
                '/message.Message/Publish',
                request_serializer=proto_dot_message__pb2.PublishRequest.SerializeToString,
                response_deserializer=proto_dot_message__pb2.MessageObjectResponse.FromString,
                )


class MessageServicer(object):
    """message Publication {
    string fromClientId = 1;
    string groupId = 2;
    string groupType = 3;
    bytes message = 4;
    }

    Method
    """

    def get_messages_in_group(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """action
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Listen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_messages_in_group': grpc.unary_unary_rpc_method_handler(
                    servicer.get_messages_in_group,
                    request_deserializer=proto_dot_message__pb2.GetMessagesInGroupRequest.FromString,
                    response_serializer=proto_dot_message__pb2.GetMessagesInGroupResponse.SerializeToString,
            ),
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=proto_dot_message__pb2.SubscribeAndListenRequest.FromString,
                    response_serializer=proto_dot_message__pb2.BaseResponse.SerializeToString,
            ),
            'Listen': grpc.unary_stream_rpc_method_handler(
                    servicer.Listen,
                    request_deserializer=proto_dot_message__pb2.SubscribeAndListenRequest.FromString,
                    response_serializer=proto_dot_message__pb2.MessageObjectResponse.SerializeToString,
            ),
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=proto_dot_message__pb2.PublishRequest.FromString,
                    response_serializer=proto_dot_message__pb2.MessageObjectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'message.Message', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Message(object):
    """message Publication {
    string fromClientId = 1;
    string groupId = 2;
    string groupType = 3;
    bytes message = 4;
    }

    Method
    """

    @staticmethod
    def get_messages_in_group(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/message.Message/get_messages_in_group',
            proto_dot_message__pb2.GetMessagesInGroupRequest.SerializeToString,
            proto_dot_message__pb2.GetMessagesInGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/message.Message/Subscribe',
            proto_dot_message__pb2.SubscribeAndListenRequest.SerializeToString,
            proto_dot_message__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Listen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/message.Message/Listen',
            proto_dot_message__pb2.SubscribeAndListenRequest.SerializeToString,
            proto_dot_message__pb2.MessageObjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/message.Message/Publish',
            proto_dot_message__pb2.PublishRequest.SerializeToString,
            proto_dot_message__pb2.MessageObjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
